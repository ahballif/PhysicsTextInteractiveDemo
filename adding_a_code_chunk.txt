To add a code chunk, the first thing is to add this to the header file:

<!-- These two links and the script are used for adding python code with code highlight. -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous"> 
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.48.4/codemirror.min.css" /> 
<script src="https://cdn.jsdelivr.net/pyodide/v0.27.2/full/pyodide.js"></script>
<!-- End of code imports -->

The second thing you need to add in order to add a code chunk is this script at the end of the page. 
This is the script template you must add:

<!-- These two source codes are used for code highlighting. -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.3/codemirror.min.js"
		integrity="sha512-XMlgZzPyVXf1I/wbGnofk1Hfdx+zAWyZjh6c21yGo/k1zNC4Ve6xcQnTDTCHrjFGsOrVicJsBURLYktVEu/8vQ=="
		crossorigin="anonymous" referrerpolicy="no-referrer"></script> 
	<script src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.63.3/mode/python/python.min.js"
		integrity="sha512-/mavDpedrvPG/0Grj2Ughxte/fsm42ZmZWWpHz1jCbzd5ECv8CB7PomGtw0NAnhHmE/lkDFkRMupjoohbKNA1Q=="
		crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<!-- The code that runs all the python code cells -->
  <script>
    // Define all the id suffixes on this page
    const page_cell_ids = [] // id's should be in the form '.#.C#.#'

    // This big array gives all the strings of default codes, in order given above for ids
    const page_code_defaults = []

    var page_code_cm_editors = []

    // init Pyodide
    async function main() {
      // start pyodide
      let pyodide = await loadPyodide();

      // micropip allows installing packages
      await pyodide.loadPackage("micropip");
      const micropip = pyodide.pyimport("micropip");

      //install the packages we might use on this page
      await micropip.install('numpy');
      await micropip.install('matplotlib')
      
      // overwrite the print function so that it looks like it works. 
      pyodide.runPython(`
def print(*args):
    return args
      `)

      // return the pyodide object for use
      return pyodide;
    }
    let pyodideReadyPromise = main();

    // Initialize code editors
    for (let i = 0; i < page_cell_ids.length; i++) {
      const editor = CodeMirror.fromTextArea(document.getElementById("code" + page_cell_ids[i]), { 
        mode: { 
          name: "python", 
          version: 3, 
          singleLineStringErrors: false
        }, 
        lineNumbers: true, 
        showInvisibles: true,
        lineWrapping: true,
        indentUnit: 4, 
        tabSize: 4,
        matchBrackets: true
      }); 
      editor.setValue(page_code_defaults[i]); 
      page_code_cm_editors.push(editor);
    }
    
    // This function resets the code editors to default value
    function resetCode(cellSuffix) {
      const idx = page_cell_ids.indexOf(cellSuffix);
      page_code_cm_editors[idx].setValue(page_code_defaults[idx]);
    }

    
    
    // This function runs a given code cell
    async function evaluatePython(cellSuffix) {
      const idx = page_cell_ids.indexOf(cellSuffix);
      const output = document.getElementById("output" + cellSuffix);
      const plotparent = document.getElementById("plot" + cellSuffix);

      let pyodide = await pyodideReadyPromise;
      try {
        
        // Clear the old graphing stuff
        while (plotparent.lastElementChild) {
          plotparent.removeChild(plotparent.lastChild);
        }
  
        // Run the python
        output.value = pyodide.runPython(page_code_cm_editors[idx].getValue());

        // If it says undefined, then just make it blank because just saying undefined is weird. 
        if (output.value == 'undefined') {
          output.value = ""
        }
  
        // MOVE THE PLOTS TO WHERE THEY SHOULD BE
        const newMplObjects = document.querySelectorAll(`[id*="matplotlib_"]`)
        // I'm going to rename the new stuff so that these won't show up in the 
        // query in the future. This also means that this query includes only the stuff from this run. 
        
        newMplObjects.forEach(function(element) {
          var highestObject = element;
          while (highestObject.parentElement.id.startsWith("matplotlib_")) {
            highestObject = highestObject.parentElement;
          }
          // now we know we have the parent
          if (!plotparent.querySelector(highestObject.id)) {
            // If the parent isn't already in the plotparent object
            plotparent.appendChild(highestObject);
          }
  
          // change the id of the object
          element.id = "plotobject" + cellSuffix
        });
        
      } catch (err) {
        output.value = err;
      }
    }
  </script>


After pasting this into the end of the file (still in the body), you need to put the id suffixes
in the page_cell_ids array. These are of the form '.#.C#.#' where the first number gives the chapter number,
the second number is the example number, and the third number is the cell in the example. The first cell for an example would 
be cell one. 

In the page_code_defaults array you put the strings for what code you want to start in the cells. The number
of strings in this needs to be the same as the number of ids, which needs to be the same as the number of code cells
that you have in on the page. 

I currently expect that most code snippets are going to be in code examples. Code examples follow the same template
that the built in examples us, but with a C before the example number. 

Everywhere where you want a code chunk, you need to add

<textarea id="code.#.C#.#" style="width: 100%;"></textarea>
<button onclick="evaluatePython('.#.C#.#')">Run</button><button onclick="resetCode('.#.C#.#')">Reset Code</button><button onclick="copycode('.#.C#.#')">Copy Code</button>
<textarea id="output.#.C#.#" style="width: 100%;" disabled></textarea>
<div id="plot.#.C#.#"></div>

Make sure that the code suffix is consistent between these four lines and that the code snippet matches the one
that you put in the array for this code chunk. 


Here is a template you can paste in for adding a code example


<div data-type="example" id="fs-id1167133605840" data-sm="./modules/m58279/index.cnxml:158:1"><h3 class="os-title">
  <span class="os-title-label">Code Example </span>
  <span class="os-number">#.C#</span>
  <span class="os-divider"> </span>
</h3>
<div class="body">
<p id="fs-id1167133605842" data-sm="./modules/m58279/index.cnxml:159:1"></p>
<h4 data-type="title" data-sm="./modules/m58279/index.cnxml:159:31">Code Example Title</h4>
<!-- Start example here. The previous line is the title. -->

</div>
</div>